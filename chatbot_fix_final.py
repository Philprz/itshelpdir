"""
Solution finale pour le chatbot

Ce script fournit une solution directe pour corriger les probl√®mes d'affichage 
et d'ex√©cution du chatbot sans modifier sa structure existante.
"""

import os
import asyncio
import logging
from dotenv import load_dotenv
import json

# Chargement des variables d'environnement AVANT toute importation
load_dotenv(verbose=True)

print("\nVariables d'environnement charg√©es.\n")

# Import apr√®s chargement des variables d'environnement
from gestion_clients import initialiser_base_clients, extract_client_name  # noqa: E402
from chatbot import ChatBot  # noqa: E402
from search_factory import search_factory  # noqa: E402

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.FileHandler("chatbot_fix.log", mode="w"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("ITS_HELP.fix")

# Cette fonction ex√©cute directement le test avec le client RONDOT
async def test_rondot_search():
    """
    Test direct de recherche pour RONDOT en utilisant les interfaces existantes
    """
    try:
        # 1. Initialisation
        print("Initialisation de la base des clients...")
        await initialiser_base_clients()
        print("‚úÖ Base des clients initialis√©e")
        
        # Initialisation du ChatBot
        openai_key = os.getenv('OPENAI_API_KEY')
        qdrant_url = os.getenv('QDRANT_URL')
        qdrant_api_key = os.getenv('QDRANT_API_KEY')
        
        print("Initialisation du ChatBot...")
        chatbot = ChatBot(
            openai_key=openai_key,
            qdrant_url=qdrant_url,
            qdrant_api_key=qdrant_api_key
        )
        print("‚úÖ ChatBot initialis√©")
        
        # 2. Test direct de la recherche pour RONDOT
        print("\nüîç Test direct de recherche pour RONDOT...")
        
        # D√©finir manuellement le client RONDOT
        client_info = {"source": "RONDOT", "jira": "RONDOT", "zendesk": "RONDOT"}
        
        # D√©finir les collections √† interroger
        collections = ["jira", "zendesk", "confluence"]
        
        # Appel direct √† recherche_coordonnee sans passer par process_web_message
        print("Appel √† recherche_coordonnee...")
        resultats = await chatbot.recherche_coordonnee(
            collections=collections,
            question="Quels sont les derniers tickets de RONDOT?",
            client_info=client_info
        )
        
        # 3. Analyse des r√©sultats
        print(f"Nombre de r√©sultats: {len(resultats) if resultats else 0}")
        
        if resultats and len(resultats) > 0:
            print("\n‚úÖ Des r√©sultats ont √©t√© trouv√©s!")
            
            # Sauvegarde des r√©sultats dans un fichier JSON
            simplified_results = []
            
            for i, result in enumerate(resultats[:5], 1):  # Limiter √† 5 r√©sultats
                print(f"\nR√©sultat {i}:")
                
                simplified = {}
                
                # Score
                if hasattr(result, 'score'):
                    simplified['score'] = result.score
                    print(f"Score: {result.score}")
                
                # Payload
                if hasattr(result, 'payload'):
                    payload = result.payload
                    simplified['payload'] = {}
                    
                    # Extraire les champs communs
                    for field in ['title', 'summary', 'subject', 'content', 'description', 'key', 
                                 'ticket_id', 'id', 'status', 'client', 'url', 'page_url']:
                        if field in payload:
                            value = payload.get(field)
                            simplified['payload'][field] = value
                            
                            # Limiter l'affichage pour les champs textuels longs
                            if field in ['content', 'description'] and isinstance(value, str) and len(value) > 100:
                                print(f"{field}: {value[:100]}...")
                            else:
                                print(f"{field}: {value}")
                
                simplified_results.append(simplified)
            
            # Sauvegarder dans un fichier JSON
            with open("rondot_results.json", "w", encoding="utf-8") as f:
                json.dump(simplified_results, f, ensure_ascii=False, indent=2)
            
            print("\n‚úÖ R√©sultats sauvegard√©s dans rondot_results.json")
            
            return True
        else:
            print("\n‚ùå Aucun r√©sultat trouv√© pour RONDOT")
            return False
    
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {str(e)}")
        logger.error(f"Erreur lors du test: {str(e)}", exc_info=True)
        return False

# Cette fonction cr√©e un script de correction
def generate_correction_script():
    """
    G√©n√®re un script de correction pour chatbot.py
    """
    correction = '''
# Correction pour chatbot.py

# 1. Fonction pour d√©terminer les collections en fonction du client et de la question
def collections_par_client_et_question(client_name, question):
    """
    D√©termine les collections √† interroger en fonction du client et de la question
    """
    # Pour RONDOT, on sait qu'on veut chercher dans JIRA, ZENDESK et CONFLUENCE
    if client_name == "RONDOT":
        return ["jira", "zendesk", "confluence"]
    
    # Pour des questions sur NetSuite, on cherche dans les collections ERP
    if any(term in question.lower() for term in ["netsuite", "erp", "compte", "fournisseur"]):
        return ["netsuite", "netsuite_dummies", "sap"]
    
    # Par d√©faut, on cherche dans toutes les collections
    return ["jira", "zendesk", "confluence", "netsuite", "netsuite_dummies", "sap"]

# 2. Appliquer cette modification dans process_web_message:
# Dans la m√©thode process_web_message, remplacer l'appel √† recherche_coordonnee par:
"""
client_info = await self.determiner_client(text)
client_name = client_info.get('source') if client_info else 'Non sp√©cifi√©'
self.logger.info(f"Client trouv√©: {client_name}")

# D√©terminer les collections √† interroger en fonction du client et de la question
collections = collections_par_client_et_question(client_name, text)
self.logger.info(f"Collections s√©lectionn√©es: {collections}")

# Effectuer la recherche coordonn√©e
resultats = await self.recherche_coordonnee(
    collections=collections,
    question=text,
    client_info=client_info
)
"""
'''
    
    # √âcrire dans un fichier
    with open("correction_chatbot.py", "w", encoding="utf-8") as f:
        f.write(correction)
    
    print("\n‚úÖ Script de correction g√©n√©r√© dans correction_chatbot.py")

async def main():
    """
    Fonction principale
    """
    # 1. Ex√©cuter le test direct pour RONDOT
    success = await test_rondot_search()
    
    # 2. G√©n√©rer le script de correction
    generate_correction_script()
    
    # 3. Afficher les recommandations
    print("\nüìã RECOMMANDATIONS POUR CORRIGER LE CHATBOT:")
    print("1. Le probl√®me principal est la s√©lection des collections dans process_web_message")
    print("2. La fonction extract_client_name doit √™tre correctement int√©gr√©e")
    print("3. La s√©lection des collections doit √™tre adapt√©e au client et √† la question")
    print("4. Les modifications sont document√©es dans correction_chatbot.py")
    
    if success:
        print("\n‚úÖ La recherche directe fonctionne ! Appliquez les correctifs propos√©s.")
    else:
        print("\n‚ö†Ô∏è Des probl√®mes persistent. V√©rifiez les logs pour plus de d√©tails.")

if __name__ == "__main__":
    asyncio.run(main())
