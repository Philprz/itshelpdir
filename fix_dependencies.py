"""
Correction des d√©pendances manquantes pour les clients de recherche

Ce script identifie et corrige les probl√®mes de d√©pendances manquantes
qui emp√™chent les clients de recherche de fonctionner correctement.
"""

import os
import asyncio
import logging
from dotenv import load_dotenv
import sys

# Chargement des variables d'environnement
load_dotenv(verbose=True)

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.FileHandler("dependencies_fix.log", mode="w"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("ITS_HELP.fix")

# Import apr√®s chargement des variables d'environnement
from gestion_clients import initialiser_base_clients  # noqa: E402
from search_factory import search_factory  # noqa: E402

async def verify_environment():
    """V√©rifie les variables d'environnement critiques"""
    critical_vars = {
        'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY'),
        'QDRANT_URL': os.getenv('QDRANT_URL'),
        'QDRANT_API_KEY': os.getenv('QDRANT_API_KEY')
    }
    
    print("\nüìã V√©rification des variables d'environnement:")
    for var, value in critical_vars.items():
        status = "‚úÖ Pr√©sente" if value else "‚ùå Manquante"
        masked_value = "****" if value and len(value) > 4 else None
        print(f"{var}: {status}" + (f" ({masked_value})" if masked_value else ""))
    
    return all(critical_vars.values())

async def init_dependencies():
    """Initialise les d√©pendances requises pour les clients de recherche"""
    try:
        # 1. V√©rification de l'environnement
        print("\nInitialisation des d√©pendances...")
        env_ok = await verify_environment()
        
        if not env_ok:
            print("‚ö†Ô∏è Certaines variables d'environnement sont manquantes")
            print("Vous devez configurer OPENAI_API_KEY, QDRANT_URL et QDRANT_API_KEY")
            return False
        
        # 2. Initialisation de la base des clients
        print("\nInitialisation de la base des clients...")
        await initialiser_base_clients()
        print("‚úÖ Base des clients initialis√©e")
        
        # 3. Cr√©ation du fichier de configuration de secours
        print("\nCr√©ation d'un fichier de configuration de secours...")
        fallback_config = f"""
# Configuration de secours pour les clients de recherche
# G√©n√©r√© automatiquement par fix_dependencies.py

import os

# Configuration OpenAI
OPENAI_API_KEY = "{os.getenv('OPENAI_API_KEY')}"

# Configuration Qdrant
QDRANT_URL = "{os.getenv('QDRANT_URL')}"
QDRANT_API_KEY = "{os.getenv('QDRANT_API_KEY')}"

# Mapping des clients vers les collections
CLIENT_MAPPING = {{
    "jira": "jira",
    "zendesk": "zendesk",
    "confluence": "confluence",
    "netsuite": "netsuite",
    "netsuite_dummies": "netsuite_dummies",
    "sap": "sap"
}}

# Configuration des fallbacks
FALLBACK_CHAIN = {{
    "jira": ["confluence", "zendesk"],
    "zendesk": ["jira", "confluence"],
    "confluence": ["jira", "zendesk"],
    "netsuite": ["netsuite_dummies", "sap"],
    "netsuite_dummies": ["netsuite", "sap"],
    "sap": ["netsuite", "netsuite_dummies"]
}}
"""
        
        with open("fallback_config.py", "w") as f:
            f.write(fallback_config)
        
        print("‚úÖ Configuration de secours cr√©√©e")
        
        # 4. Cr√©ation du correctif pour search_factory
        print("\nCr√©ation du correctif pour search_factory...")
        
        search_factory_fix = """
# Correctif pour search_factory.py

from typing import Dict, Any, List, Optional
import logging
import os
import asyncio

# Importer la configuration de secours
try:
    from fallback_config import (
        OPENAI_API_KEY, QDRANT_URL, QDRANT_API_KEY,
        CLIENT_MAPPING, FALLBACK_CHAIN
    )
except ImportError:
    # Si le fichier n'existe pas, utiliser les variables d'environnement
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
    QDRANT_URL = os.getenv('QDRANT_URL')
    QDRANT_API_KEY = os.getenv('QDRANT_API_KEY')
    
    CLIENT_MAPPING = {
        "jira": "jira",
        "zendesk": "zendesk",
        "confluence": "confluence",
        "netsuite": "netsuite",
        "netsuite_dummies": "netsuite_dummies",
        "sap": "sap"
    }
    
    FALLBACK_CHAIN = {
        "jira": ["confluence", "zendesk"],
        "zendesk": ["jira", "confluence"],
        "confluence": ["jira", "zendesk"],
        "netsuite": ["netsuite_dummies", "sap"],
        "netsuite_dummies": ["netsuite", "sap"],
        "sap": ["netsuite", "netsuite_dummies"]
    }

logger = logging.getLogger("ITS_HELP.search_factory")

# Fonction pour initialiser un client avec gestion des erreurs
async def initialize_client_safely(client_type: str, collection_name: str = None):
    """
    Initialise un client de recherche avec gestion des erreurs
    """
    from qdrant_search_clients import QdrantSearchClientFactory
    
    try:
        # V√©rifier si les variables n√©cessaires sont disponibles
        if not OPENAI_API_KEY or not QDRANT_URL:
            logger.error(f"Variables d'environnement manquantes pour initialiser {client_type}")
            return None
        
        # Initialiser la factory Qdrant
        factory = QdrantSearchClientFactory(
            qdrant_url=QDRANT_URL,
            qdrant_api_key=QDRANT_API_KEY,
            openai_api_key=OPENAI_API_KEY
        )
        
        # Utiliser le nom de collection appropri√©
        actual_collection = collection_name or CLIENT_MAPPING.get(client_type, client_type)
        
        # Cr√©er le client
        client = factory.create_search_client(collection_name=actual_collection)
        
        if client:
            logger.info(f"Client {client_type} initialis√© avec succ√®s")
            return client
        else:
            logger.warning(f"√âchec de l'initialisation du client {client_type}")
            return None
            
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation du client {client_type}: {str(e)}", exc_info=True)
        return None

# Appliquer ce correctif en modifiant search_factory._initialize_client dans votre code existant
"""
        
        with open("search_factory_fix.py", "w") as f:
            f.write(search_factory_fix)
        
        print("‚úÖ Correctif pour search_factory cr√©√©")
        
        # 5. Cr√©ation du correctif pour chatbot.py
        print("\nCr√©ation du correctif pour chatbot.py...")
        
        chatbot_fix = """
# Correctif pour chatbot.py

# Fonction pour d√©terminer les collections en fonction du client et de la question
def collections_par_client_et_question(client_name, question):
    """
    D√©termine les collections √† interroger en fonction du client et de la question
    """
    # Pour RONDOT, on sait qu'on veut chercher dans JIRA, ZENDESK et CONFLUENCE
    if client_name == "RONDOT":
        return ["jira", "zendesk", "confluence"]
    
    # Pour des questions sur NetSuite, on cherche dans les collections ERP
    if any(term in question.lower() for term in ["netsuite", "erp", "compte", "fournisseur"]):
        return ["netsuite", "netsuite_dummies", "sap"]
    
    # Par d√©faut, on cherche dans toutes les collections
    return ["jira", "zendesk", "confluence", "netsuite", "netsuite_dummies", "sap"]

# Fonction pour extraire le nom du client avec gestion des erreurs
async def extract_client_name_safely(text):
    """
    Extrait le nom du client avec gestion robuste des erreurs
    """
    # Import ici pour √©viter les probl√®mes de circularit√©
    from gestion_clients import extract_client_name
    import asyncio
    
    try:
        # V√©rifier si la fonction est asynchrone ou synchrone
        if asyncio.iscoroutinefunction(extract_client_name):
            # Si async, l'appeler avec await
            client_info = await extract_client_name(text)
        else:
            # Sinon, l'appeler directement
            client_info = extract_client_name(text)
        
        # V√©rifier le r√©sultat
        if isinstance(client_info, dict) and 'source' in client_info:
            return client_info
        
        # Recherche explicite de RONDOT dans le texte comme fallback
        if "RONDOT" in text.upper():
            return {"source": "RONDOT", "jira": "RONDOT", "zendesk": "RONDOT"}
        
        return None
    except Exception as e:
        # En cas d'erreur, logger et retourner None
        logging.error(f"Erreur lors de l'extraction du client: {str(e)}", exc_info=True)
        
        # Recherche explicite de RONDOT dans le texte comme fallback
        if "RONDOT" in text.upper():
            return {"source": "RONDOT", "jira": "RONDOT", "zendesk": "RONDOT"}
        
        return None

# Version am√©lior√©e de process_web_message
async def process_web_message_fixed(self, text, conversation, user_id, mode="detail"):
    """
    Version am√©lior√©e de process_web_message qui g√®re correctement les erreurs et la s√©lection des collections
    """
    self.logger.info(f"Traitement du message: {text}")
    
    try:
        # 1. Analyser la question
        analysis = await asyncio.wait_for(self.analyze_question(text), timeout=60)
        self.logger.info(f"Analyse termin√©e")
        
        # 2. D√©terminer le client
        client_info = await extract_client_name_safely(text)
        client_name = client_info.get('source') if client_info else 'Non sp√©cifi√©'
        self.logger.info(f"Client trouv√©: {client_name}")
        
        # 3. D√©terminer les collections √† interroger
        collections = collections_par_client_et_question(client_name, text)
        self.logger.info(f"Collections s√©lectionn√©es: {collections}")
        
        # 4. Effectuer la recherche
        self.logger.info(f"Lancement de la recherche pour: {text}")
        
        # Appel √† recherche_coordonnee avec la bonne signature
        resultats = await self.recherche_coordonnee(
            collections=collections,
            question=text,
            client_info=client_info
        )
        
        # 5. V√©rifier si des r√©sultats ont √©t√© trouv√©s
        if not resultats or len(resultats) == 0:
            self.logger.warning(f"Aucun r√©sultat trouv√© pour: {text}")
            return {
                "text": "D√©sol√©, je n'ai trouv√© aucun r√©sultat pertinent pour votre question.",
                "blocks": [{"type": "section", "text": {"type": "mrkdwn", "text": "D√©sol√©, je n'ai trouv√© aucun r√©sultat pertinent pour votre question."}}],
                "metadata": {"client": client_name}
            }
        
        # 6. G√©n√©rer la r√©ponse avec les r√©sultats trouv√©s
        self.logger.info(f"{len(resultats)} r√©sultats trouv√©s, g√©n√©ration de la r√©ponse...")
        
        # Appel √† generate_response avec la bonne signature
        response = await self.generate_response(text, resultats, client_info, mode)
        return response
        
    except Exception as e:
        self.logger.error(f"Erreur lors du traitement du message: {str(e)}", exc_info=True)
        return {
            "text": f"D√©sol√©, une erreur s'est produite lors du traitement de votre demande: {str(e)}",
            "blocks": [{"type": "section", "text": {"type": "mrkdwn", "text": f"D√©sol√©, une erreur s'est produite lors du traitement de votre demande: {str(e)}"}}],
            "metadata": {"client": client_name if 'client_name' in locals() else 'Non sp√©cifi√©', "error": str(e)}
        }

# Remplacer la m√©thode process_web_message existante par cette version am√©lior√©e
"""
        
        with open("chatbot_fix.py", "w") as f:
            f.write(chatbot_fix)
        
        print("‚úÖ Correctif pour chatbot.py cr√©√©")
        
        return True
        
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation des d√©pendances: {str(e)}", exc_info=True)
        print(f"\n‚ùå Erreur critique: {str(e)}")
        return False

async def generer_instructions():
    """G√©n√®re des instructions d'installation pour l'utilisateur"""
    instructions = """
# Instructions pour corriger les probl√®mes du chatbot

## 1. Correction des d√©pendances manquantes

Pour r√©soudre les probl√®mes de d√©pendances manquantes qui emp√™chent l'initialisation correcte des clients de recherche:

1. **Assurez-vous que les variables d'environnement sont correctement configur√©es**:
   - OPENAI_API_KEY
   - QDRANT_URL
   - QDRANT_API_KEY

2. **Utilisez le fichier de configuration de secours**:
   - Le fichier `fallback_config.py` a √©t√© cr√©√© avec les valeurs actuelles des variables d'environnement
   - Ce fichier sera utilis√© par le correctif de search_factory en cas de probl√®me avec les variables d'environnement

## 2. Appliquer les correctifs

### Pour search_factory.py:

1. Ouvrez le fichier `search_factory.py`
2. Trouvez la m√©thode `_initialize_client`
3. Remplacez-la par la version du fichier `search_factory_fix.py`
4. Ajoutez la fonction `initialize_client_safely` au d√©but du fichier

### Pour chatbot.py:

1. Ouvrez le fichier `chatbot.py`
2. Trouvez la m√©thode `process_web_message`
3. Remplacez-la par la version du fichier `chatbot_fix.py`
4. Ajoutez les fonctions `collections_par_client_et_question` et `extract_client_name_safely` au d√©but du fichier

## 3. V√©rifier les corrections

Apr√®s avoir appliqu√© les correctifs, vous pouvez ex√©cuter √† nouveau les tests pour v√©rifier que:

1. Les clients de recherche s'initialisent correctement
2. La d√©tection du client fonctionne (en particulier pour RONDOT)
3. La s√©lection des collections √† interroger est adapt√©e au client et √† la question
4. La recherche et la g√©n√©ration de r√©ponses fonctionnent correctement

## 4. Points cl√©s des correctifs

Les correctifs apportent les am√©liorations suivantes:

1. **Gestion robuste des erreurs** pour l'initialisation des clients
2. **S√©lection intelligente des collections** en fonction du client et de la question
3. **D√©tection am√©lior√©e du client** avec gestion des cas particuliers (comme RONDOT)
4. **Configuration de secours** pour pallier les probl√®mes de variables d'environnement
"""
    
    with open("INSTRUCTIONS.md", "w") as f:
        f.write(instructions)
    
    print("\n‚úÖ Instructions g√©n√©r√©es dans INSTRUCTIONS.md")

async def main():
    """Fonction principale"""
    try:
        print("üîç Analyse et correction des d√©pendances manquantes...")
        
        # Initialiser les d√©pendances
        success = await init_dependencies()
        
        # G√©n√©rer des instructions
        await generer_instructions()
        
        if success:
            print("\n‚úÖ D√©pendances initialis√©es avec succ√®s")
            print("‚û°Ô∏è Suivez les instructions dans INSTRUCTIONS.md pour appliquer les correctifs")
        else:
            print("\n‚ö†Ô∏è Certaines d√©pendances n'ont pas pu √™tre initialis√©es")
            print("‚û°Ô∏è Consultez le fichier dependencies_fix.log pour plus de d√©tails")
            print("‚û°Ô∏è V√©rifiez les variables d'environnement et r√©ex√©cutez ce script")
        
    except Exception as e:
        logger.error(f"Erreur dans le programme principal: {str(e)}", exc_info=True)
        print(f"\n‚ùå Erreur critique: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())
