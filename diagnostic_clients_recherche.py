"""
Diagnostic des clients de recherche

Ce script effectue une analyse d√©taill√©e de l'√©tat d'initialisation des clients de recherche
pour identifier pourquoi la recherche coordonn√©e ne fonctionne pas correctement.
"""

import os
import sys
import asyncio
import logging
from dotenv import load_dotenv
import inspect
from typing import Dict, List, Any, Optional

# Chargement des variables d'environnement AVANT toute importation
load_dotenv(verbose=True)

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.FileHandler("diagnostic_clients.log", mode="w"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("ITS_HELP.diagnostic")

print("\nVariables d'environnement charg√©es.\n")

# Import apr√®s chargement des variables d'environnement
from gestion_clients import initialiser_base_clients  # noqa: E402
from search_factory import search_factory, SearchClientFactory  # noqa: E402

class ClientDiagnostic:
    """
    Classe pour le diagnostic des clients de recherche
    """
    
    def __init__(self):
        """Initialisation du diagnostic"""
        self.search_factory = search_factory
        self.collections = [
            "jira", "zendesk", "confluence", 
            "netsuite", "netsuite_dummies", "sap"
        ]
        self.status = {}
        self.all_clients = []
    
    async def initialiser(self):
        """Initialise les pr√©requis pour le diagnostic"""
        print("Initialisation de la base des clients...")
        await initialiser_base_clients()
        print("‚úÖ Base des clients initialis√©e")
        
        # R√©cup√©rer les informations sur SearchClientFactory
        self.factory_class_info()
        
        # Initialiser le statut de chaque collection
        for collection in self.collections:
            self.status[collection] = {
                "initialized": False,
                "error": None,
                "client": None
            }
    
    def factory_class_info(self):
        """Affiche des informations sur la classe SearchClientFactory"""
        try:
            print("\nüìã Informations sur SearchClientFactory:")
            
            # V√©rifier le type de search_factory
            print(f"Type de search_factory: {type(search_factory)}")
            
            # Obtenir les m√©thodes de la classe
            methods = [method for method in dir(SearchClientFactory) 
                      if callable(getattr(SearchClientFactory, method)) and not method.startswith('_')]
            
            print(f"M√©thodes disponibles: {methods}")
            
            # V√©rifier si search_factory a des attributs sp√©cifiques
            if hasattr(search_factory, "_clients_cache"):
                print(f"Cache de clients: {len(search_factory._clients_cache)} clients en cache")
            else:
                print("‚ö†Ô∏è Pas de cache de clients d√©tect√©")
            
            # V√©rification de get_client
            if hasattr(search_factory, "get_client"):
                method = getattr(search_factory, "get_client")
                sig = inspect.signature(method)
                print(f"Signature de get_client: {sig}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'analyse de SearchClientFactory: {str(e)}")
    
    async def tester_client(self, client_type: str, collection_name: str = None):
        """Teste l'initialisation d'un client sp√©cifique"""
        try:
            print(f"\nüîç Test du client {client_type}" + (f" ({collection_name})" if collection_name else ""))
            
            # Tenter d'obtenir le client
            client = await self.search_factory.get_client(
                client_type=client_type, 
                collection_name=collection_name,
                fallback_enabled=True
            )
            
            if client:
                # Client obtenu avec succ√®s
                client_info = {
                    "type": client_type,
                    "collection": collection_name,
                    "class": type(client).__name__,
                    "methods": [method for method in dir(client) if callable(getattr(client, method)) and not method.startswith('_')]
                }
                
                print(f"‚úÖ Client {client_type} initialis√© avec succ√®s")
                print(f"  - Classe: {client_info['class']}")
                print(f"  - M√©thodes: {', '.join(client_info['methods'])}")
                
                # V√©rifier si le client a une m√©thode de recherche
                has_search = any(method in client_info['methods'] for method in 
                                ['recherche_intelligente', 'search', 'query', 'find'])
                
                if has_search:
                    print(f"  - ‚úÖ Le client poss√®de une m√©thode de recherche")
                else:
                    print(f"  - ‚ö†Ô∏è Le client ne semble pas avoir de m√©thode de recherche standard")
                
                self.all_clients.append(client_info)
                
                if collection_name in self.status:
                    self.status[collection_name]["initialized"] = True
                    self.status[collection_name]["client"] = client_info
                
                return client
            else:
                # √âchec d'initialisation
                print(f"‚ùå √âchec d'initialisation du client {client_type}")
                
                if collection_name in self.status:
                    self.status[collection_name]["error"] = "Client non initialis√©"
                
                return None
                
        except Exception as e:
            # Erreur lors de l'initialisation
            print(f"‚ùå Erreur lors de l'initialisation du client {client_type}: {str(e)}")
            logger.error(f"Erreur lors de l'initialisation du client {client_type}", exc_info=True)
            
            if collection_name in self.status:
                self.status[collection_name]["error"] = str(e)
            
            return None
    
    async def diagnostiquer_tous_clients(self):
        """Diagnostique tous les clients de recherche"""
        print("\nüîç Diagnostic de tous les clients de recherche...")
        
        for collection in self.collections:
            await self.tester_client(client_type=collection, collection_name=collection)
        
        print("\nüìã R√©sum√© du diagnostic:")
        success_count = 0
        
        for collection, status in self.status.items():
            if status["initialized"]:
                print(f"‚úÖ {collection}: Client initialis√© avec succ√®s")
                success_count += 1
            else:
                error_msg = status["error"] if status["error"] else "Raison inconnue"
                print(f"‚ùå {collection}: √âchec d'initialisation - {error_msg}")
        
        success_rate = (success_count / len(self.collections)) * 100
        print(f"\nTaux de r√©ussite: {success_count}/{len(self.collections)} ({success_rate:.1f}%)")
        
        return success_count == len(self.collections)
    
    async def tester_recherche_simple(self, collection: str, query: str = "test"):
        """Teste une recherche simple avec un client sp√©cifique"""
        if collection not in self.status or not self.status[collection]["initialized"]:
            print(f"‚ùå Impossible de tester la recherche pour {collection}: client non initialis√©")
            return None
        
        try:
            print(f"\nüîç Test de recherche pour {collection} avec la requ√™te '{query}'...")
            
            client = await self.search_factory.get_client(
                client_type=collection,
                collection_name=collection
            )
            
            if not client:
                print(f"‚ùå Impossible d'obtenir le client {collection} pour la recherche")
                return None
            
            # V√©rifier si le client a une m√©thode de recherche_intelligente
            if hasattr(client, "recherche_intelligente") and callable(getattr(client, "recherche_intelligente")):
                print(f"Appel √† recherche_intelligente...")
                results = await client.recherche_intelligente(
                    query=query,
                    limit=2
                )
                
                if results:
                    print(f"‚úÖ {len(results)} r√©sultats trouv√©s")
                    return results
                else:
                    print(f"‚ö†Ô∏è Aucun r√©sultat trouv√©")
                    return []
            else:
                print(f"‚ùå Le client {collection} n'a pas de m√©thode recherche_intelligente")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la recherche pour {collection}: {str(e)}")
            logger.error(f"Erreur lors de la recherche pour {collection}", exc_info=True)
            return None
    
    def generer_rapport(self):
        """G√©n√®re un rapport de diagnostic avec les probl√®mes d√©tect√©s et les solutions propos√©es"""
        problemes = []
        solutions = []
        
        # Analyser les probl√®mes
        if not any(self.status[collection]["initialized"] for collection in self.collections):
            problemes.append("Aucun client de recherche n'a pu √™tre initialis√©")
            solutions.append("V√©rifiez les variables d'environnement (OPENAI_API_KEY, QDRANT_URL, QDRANT_API_KEY)")
        
        # Probl√®mes sp√©cifiques par collection
        for collection, status in self.status.items():
            if not status["initialized"]:
                problemes.append(f"Le client {collection} n'a pas pu √™tre initialis√©: {status['error']}")
                
                if "openai" in str(status["error"]).lower():
                    solutions.append(f"V√©rifiez la cl√© API OpenAI pour le client {collection}")
                elif "qdrant" in str(status["error"]).lower():
                    solutions.append(f"V√©rifiez la configuration Qdrant pour le client {collection}")
                else:
                    solutions.append(f"V√©rifiez l'initialisation du client {collection} dans search_factory.py")
        
        # √âcrire le rapport
        report = """
# Rapport de diagnostic des clients de recherche

## Probl√®mes d√©tect√©s
"""
        
        for i, probleme in enumerate(problemes, 1):
            report += f"{i}. {probleme}\n"
        
        report += """
## Solutions propos√©es
"""
        
        for i, solution in enumerate(solutions, 1):
            report += f"{i}. {solution}\n"
        
        report += """
## Correctifs recommand√©s

1. V√©rifiez que les variables d'environnement sont correctement charg√©es avant d'initialiser les clients
2. Assurez-vous que la fonction get_client dans search_factory.py g√®re correctement les erreurs
3. Utilisez un m√©canisme de fallback pour les clients de recherche d√©faillants
4. Ajoutez plus de logs pour suivre l'initialisation des clients
5. V√©rifiez que les collections Qdrant existent et sont accessibles
"""
        
        # √âcrire dans un fichier
        with open("rapport_diagnostic.md", "w", encoding="utf-8") as f:
            f.write(report)
        
        print("\n‚úÖ Rapport de diagnostic g√©n√©r√© dans rapport_diagnostic.md")

async def main():
    """Fonction principale"""
    try:
        # Initialiser le diagnostic
        diagnostic = ClientDiagnostic()
        await diagnostic.initialiser()
        
        # Diagnostiquer tous les clients
        tous_ok = await diagnostic.diagnostiquer_tous_clients()
        
        # Si au moins un client est initialis√©, tester la recherche
        if any(diagnostic.status[collection]["initialized"] for collection in diagnostic.collections):
            for collection in diagnostic.collections:
                if diagnostic.status[collection]["initialized"]:
                    await diagnostic.tester_recherche_simple(collection, "test")
                    break
        
        # G√©n√©rer un rapport
        diagnostic.generer_rapport()
        
        # Afficher les recommandations
        print("\nüìã CONCLUSION:")
        if tous_ok:
            print("‚úÖ Tous les clients de recherche sont correctement initialis√©s")
            print("‚û°Ô∏è V√©rifiez maintenant l'impl√©mentation de process_web_message et recherche_coordonnee")
        else:
            print("‚ö†Ô∏è Certains clients de recherche n'ont pas pu √™tre initialis√©s")
            print("‚û°Ô∏è Corrigez d'abord les probl√®mes d'initialisation avant de modifier process_web_message")
        
    except Exception as e:
        logger.error(f"Erreur dans le programme principal: {str(e)}", exc_info=True)
        print(f"‚ùå Erreur critique: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())
